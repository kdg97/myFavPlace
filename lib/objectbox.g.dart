// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'place.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 7437026875369235586),
      name: 'Place',
      lastPropertyId: const obx_int.IdUid(11, 84543776844946734),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8712145999170652633),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3646684479187569224),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4036008412982347533),
            name: 'country',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6218518684931336574),
            name: 'city',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1433617695251446458),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5056430944713446966),
            name: 'note',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 6942108961444706085),
            name: 'desc',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 8148692343092773981),
            name: 'imagePath',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 1188604491107146633),
            name: 'timestamps',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 5953762486844992453),
            name: 'latitude',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(11, 84543776844946734),
            name: 'longitude',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 7437026875369235586),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Place: obx_int.EntityDefinition<Place>(
        model: _entities[0],
        toOneRelations: (Place object) => [],
        toManyRelations: (Place object) => {},
        getId: (Place object) => object.id,
        setId: (Place object, int id) {
          object.id = id;
        },
        objectToFB: (Place object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final countryOffset = fbb.writeString(object.country);
          final cityOffset = fbb.writeString(object.city);
          final categoryOffset = fbb.writeString(object.category);
          final noteOffset = fbb.writeString(object.note);
          final descOffset = fbb.writeString(object.desc);
          final imagePathOffset = fbb.writeString(object.imagePath);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, countryOffset);
          fbb.addOffset(3, cityOffset);
          fbb.addOffset(4, categoryOffset);
          fbb.addOffset(5, noteOffset);
          fbb.addOffset(6, descOffset);
          fbb.addOffset(7, imagePathOffset);
          fbb.addInt64(8, object.timestamps);
          fbb.addFloat64(9, object.latitude);
          fbb.addFloat64(10, object.longitude);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final countryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final cityParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final noteParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final descParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 16, '');
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final imagePathParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final timestampsParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);
          final longitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final latitudeParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final object = Place(
              name: nameParam,
              country: countryParam,
              city: cityParam,
              note: noteParam,
              desc: descParam,
              category: categoryParam,
              imagePath: imagePathParam,
              timestamps: timestampsParam,
              longitude: longitudeParam,
              latitude: latitudeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Place] entity fields to define ObjectBox queries.
class Place_ {
  /// See [Place.id].
  static final id = obx.QueryIntegerProperty<Place>(_entities[0].properties[0]);

  /// See [Place.name].
  static final name =
      obx.QueryStringProperty<Place>(_entities[0].properties[1]);

  /// See [Place.country].
  static final country =
      obx.QueryStringProperty<Place>(_entities[0].properties[2]);

  /// See [Place.city].
  static final city =
      obx.QueryStringProperty<Place>(_entities[0].properties[3]);

  /// See [Place.category].
  static final category =
      obx.QueryStringProperty<Place>(_entities[0].properties[4]);

  /// See [Place.note].
  static final note =
      obx.QueryStringProperty<Place>(_entities[0].properties[5]);

  /// See [Place.desc].
  static final desc =
      obx.QueryStringProperty<Place>(_entities[0].properties[6]);

  /// See [Place.imagePath].
  static final imagePath =
      obx.QueryStringProperty<Place>(_entities[0].properties[7]);

  /// See [Place.timestamps].
  static final timestamps =
      obx.QueryIntegerProperty<Place>(_entities[0].properties[8]);

  /// See [Place.latitude].
  static final latitude =
      obx.QueryDoubleProperty<Place>(_entities[0].properties[9]);

  /// See [Place.longitude].
  static final longitude =
      obx.QueryDoubleProperty<Place>(_entities[0].properties[10]);
}
